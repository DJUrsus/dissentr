Code.require_file "test_helper.exs", __DIR__

defmodule KeyParserTest do
  use ExUnit.Case

  test "parses keys from files" do
    expected_key = { :RSAPublicKey,
                     26471079579888784240481626807115698698918223017380602211058734822748036784099919641776221410701544389073618271342452951715607437568813797041885088841055721838242424753325032483135784959025089297300284660377702003561318596407042602104492546233167214685518895880725418657393965888451170415923438633176795204404787001292237132738855420427308716599870543186566975182773794086018399428441855212212421540861975881225688423382469718800974407060087581361833702346368609641281326017631930724263876623156228623667915638112665175927133180287548838422027540542329579724197551691075574138658982089204925297741342217991063951188259,
                     65537 }
    path    = 'test/fixtures/pub-test.pem'

    assert KeyParser.from_file(path) == expected_key
  end

  test "parses public RSA keys" do
    expected_key = { :RSAPublicKey,
					           26471079579888784240481626807115698698918223017380602211058734822748036784099919641776221410701544389073618271342452951715607437568813797041885088841055721838242424753325032483135784959025089297300284660377702003561318596407042602104492546233167214685518895880725418657393965888451170415923438633176795204404787001292237132738855420427308716599870543186566975182773794086018399428441855212212421540861975881225688423382469718800974407060087581361833702346368609641281326017631930724263876623156228623667915638112665175927133180287548838422027540542329579724197551691075574138658982089204925297741342217991063951188259,
 					           65537 }
  	path    = 'test/fixtures/pub-test.pem'
    key_bin = File.read!(path)
    assert KeyParser.parse_raw(key_bin) == expected_key
  end

  test "parses private RSA keys" do
  	expected_key = { :RSAPrivateKey, :"two-prime",
 					           26471079579888784240481626807115698698918223017380602211058734822748036784099919641776221410701544389073618271342452951715607437568813797041885088841055721838242424753325032483135784959025089297300284660377702003561318596407042602104492546233167214685518895880725418657393965888451170415923438633176795204404787001292237132738855420427308716599870543186566975182773794086018399428441855212212421540861975881225688423382469718800974407060087581361833702346368609641281326017631930724263876623156228623667915638112665175927133180287548838422027540542329579724197551691075574138658982089204925297741342217991063951188259,
 					           65537,
 					           24956011458000952486113154308321262184893439238168941028922211724038485141864864656404559501985223944082008308484745991954171248876615183240458246473495412202231509770189975998337238651118058002700694081604234188199637316288593225408977775326341906504104101513442798986309162402670918951405245577146672391158186437070808045069002427095494781157390828122615380700298874019471354278332464584169905623213978081283471466434681906552532604535085627220784942812806791163838385290151164168474005033948215413699093759827395884019399851583765980856790851918456339765019237558105325532039160048886868177086901300644394005161521,
 					           163066378158056249049225065388471955022191270515085950613470308798014880088350837695555977468792297267160600766494416367925798957456315744303595813212987470528942990922296529154922560459938337548503699726123470051230698118142201117568113353862416734209844928386836686453798411587368222915403251503345522781557,
 					           162333154626338819667133688443381395699310018666653014319918076671811322394958240234939158890958459932456066947543163927022496954217276183538865845573990854524171833872472927033971576212876671909113363663982484515409683262772916276856053249712863647417128122777613259131503035985169807131894190319465913010487,
 					           139904119979113886377768695189938524604235329028216928316740292095988230733902847276282428263656458042600458670650900156182489643710479907086112964971540648685496841380882390730777816035848647995441750891869790714262167840866986350284875378198208159225340809517296385338422220833033865420865984490137053190737,
 					           24046420573302062366732286302521424377815610437094579596529665506964681291640670097819389879204491035968742815916948218617489363741723258461560792053836813032648124925369900600360041837047877243292682522085874539200714178479324217094443824835016559945152811631979942927638303146986106895897413668940828593097,
 					           12093512821844781368800617913399777297329249599959837442380823889201353688460652127732284493427970378225458493794841643790938638293287173364137374078977939356704699702411545774182848471006220105431676473918900156591748162442883707343747237986511857189472273363834681820898901515929842229045906016465038038035,
 					           :asn1_NOVALUE }

  	path    = 'test/fixtures/priv-test.pem'
    key_bin = File.read!(path)
    assert KeyParser.parse_raw(key_bin) == expected_key
  end
end